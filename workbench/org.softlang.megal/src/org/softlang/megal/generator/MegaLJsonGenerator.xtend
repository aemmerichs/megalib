/*
 * generated by Xtext 2.12.0
 */
package org.softlang.megal.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.softlang.megal.megaL.impl.ModuleImpl
import org.softlang.megal.megaL.impl.TypeImpl
import org.softlang.megal.megaL.impl.InstanceImpl
import org.softlang.megal.megaL.impl.FunDeclImpl
import org.softlang.megal.megaL.impl.FunAppImpl
import org.softlang.megal.megaL.impl.RelDeclImpl
import org.softlang.megal.megaL.impl.RelInstImpl

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MegaLJsonGenerator extends AbstractGenerator {

	override void doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile(input.fileName, (input.contents.head as ModuleImpl).toJson)
	}

	private def toJson(ModuleImpl it) {
		// TODO: Write JSON
		val stmts = it.statements
		'''{"Model": "«it.name»",
			"Nodes":[
			«FOR statement : stmts»
				«IF statement instanceof TypeImpl»
					«statement.printNode»«IF !(statement.equals(stmts.get(stmts.size-1)))», «ENDIF» 
				«ELSEIF statement instanceof InstanceImpl»
					«statement.printNode»«IF !(statement.equals(stmts.get(stmts.size-1)))», «ENDIF» 
				«ELSEIF statement instanceof FunDeclImpl»
					«statement.printNode»«IF !(statement.equals(stmts.get(stmts.size-1)))», «ENDIF» 
				«ELSEIF statement instanceof FunAppImpl»
					«statement.printNode»«IF !(statement.equals(stmts.get(stmts.size-1)))», «ENDIF» 
				«ELSEIF statement instanceof RelDeclImpl»
					«statement.printNode»«IF !(statement.equals(stmts.get(stmts.size-1)))», «ENDIF» 
				«ENDIF»	 
			«ENDFOR»
			],
			"Edges":[
			«FOR statement : stmts»
				«IF statement instanceof TypeImpl»
					«statement.printEdge»«IF !(statement.equals(stmts.get(stmts.size-1)))», «ENDIF» 
				«ELSEIF statement instanceof InstanceImpl»
					«statement.printEdge»«IF !(statement.equals(stmts.get(stmts.size-1)))», «ENDIF»
				«ELSEIF statement instanceof FunDeclImpl»
					«statement.printEdge»«IF !(statement.equals(stmts.get(stmts.size-1)))», «ENDIF»
				«ELSEIF statement instanceof FunAppImpl»
					«statement.printEdge»«IF !(statement.equals(stmts.get(stmts.size-1)))», «ENDIF»
				«ELSEIF statement instanceof RelDeclImpl»
					«statement.printEdge»«IF !(statement.equals(stmts.get(stmts.size-1)))», «ENDIF»
				«ENDIF»	 
			«ENDFOR»
			]
		}
		'''
	}

	private def printNode(RelDeclImpl t) {
		'''
			{"name": "«t.name»",
			"colour": "#118C01"}	
		'''
	}

	private def printNode(FunAppImpl t) {
		'''
			{"name": "Application:«t.f.name»",
			"colour": "#2E64FE"}
		'''
	}

	private def printNode(FunDeclImpl t) {
		'''
			{"name": "Declaration:«t.name»",
			"colour": "#A4A4A4"}
		'''
	}

	private def printNode(InstanceImpl t) {
		'''
			{"name": "«t.name»",
			 "links": «t.links.printUrlArray»,
			 "bindings": «t.binds.printUrlArray»,
			 "colour": "#A4A4A4"}
		'''
	}

	private def printNode(TypeImpl t) {
		'''
			{"name":  "«t.name»",
			 "links": «t.links.printUrlArray»,
			 "colour": "#A4A4A4"}
		'''
	}

	private def printEdge(RelDeclImpl t) {
		'''
			«FOR edge : t.reltedges»
				{"label": "left", 
				 "source": "«edge.left»",
				 "target": "«t.name»"},
				{"label": "right", 
				 "source": "«edge.right»",
				 "target": "«t.name»"}«IF !(edge.equals(t.reltedges.get(t.reltedges.size-1)))», «ENDIF»
			«ENDFOR»
		'''
	}

	private def printEdge(FunAppImpl t) {
		'''
			«FOR in : t.in»
				{"label": "in", 
				 "source": "«in.name»",
				 "target": "Application:«t.f.name»"}«IF !(t.out.empty && in.equals(t.in.get(t.in.size-1)))», «ENDIF»
			«ENDFOR»
			«FOR out : t.out»
				{"label": "out", 
				 "source": "«out.name»",
				 "target": "Application:«t.f.name»"}«IF !(out.equals(t.out.get(t.out.size-1)))», «ENDIF»
			«ENDFOR»
		'''
	}

	private def printEdge(FunDeclImpl t) {
		'''
			«FOR domain : t.domains»
				{"label": "inputOf", 
				 "source": "«domain.name»",
				 "target": "Declaration:«t.name»"}«IF !(t.ranges.empty && domain.equals(t.domains.get(t.domains.size-1)))», «ENDIF»
			«ENDFOR»
			«FOR range : t.ranges»
				{"label": "outputOf", 
				 "source": "«range.name»",
				 "target": "Declaration:«t.name»"}«IF !(range.equals(t.ranges.get(t.ranges.size-1)))», «ENDIF»
			«ENDFOR»
		'''
	}

	private def printEdge(InstanceImpl t) {
		'''
			{"label": "elementOf", 
			 "source": "«t.name»",
			 "target": "«t.type.name»"}«IF !(t.relEdges.empty)», «ENDIF»
			«FOR relation : t.relEdges»
				{"label": "«relation.rel.name»",
				 "source":"«t.name»",
				 "target":"«relation.right.name»"}«IF !(relation.equals(t.relEdges.get(t.relEdges.size-1)))», «ENDIF»
				 
			«ENDFOR»
		'''
	}

	private def printEdge(TypeImpl t) {
		'''
			«IF t.supertype !== null»
			{"label": "subtypeOf", 
			 "source":  "«t.name»",
			 "target":  "«t.supertype.name»"}
			«ELSE»
			{"label": "subtypeOf", 
			 "source":  "«t.name»",
			 "target":  "Entity"}
			«ENDIF»
		'''
	}

	private def printUrlArray(String[] urls) {
		'''
			[«FOR url : urls»
			 	"«url»" «IF !(url.equals(urls.get(urls.size-1)))», «ENDIF»
			 «ENDFOR»]
		'''
	}

	private def fileName(Resource res) {
		// generate the json file into the "src-gen" folder using the package structure of the model file
		res.URI.segments.drop(3).join("/").replace(".", "_") + ".json"
	}

}
