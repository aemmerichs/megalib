Creation time :

subytypeOf's right side is a declared type or Entity
We do not allow multiple inheritance

instanceOf's left side is neither subtype nor Entity
instanceOf's right side is at the left side of a subtypeOf statement 
We do not allow multiple instanceOf

Every relationship declaration refers to types that are subtypes
Every relationship declaration does not appear twice with the same domain and range
(Every relationship declaration does not have a more specific version, whose domain or range is concerned with subtypes of those that are stated.)

Any relation instance should not appear twice
Every relationship instance fits to a declaration
Relationship instances do not match multiple declarations // prevent ambiguity
Every relationship instance's left side is an instance
Every relationship instance's right side is an instance

Every Function has only one declaration // we don't want to allow overloading for functions
Every Function declaration's domains are instantiated
Every function declaration's domains are languages
Every function declaration's ranges are instantiated
Every function declaration's ranges are languages

Every function application has a declaration
Every function application exists once
Every artifact in a function application is instantiated
Every function application fits to a declaration in the sense that it is element of (a subset of) the corresponding language in the declaration.

-------------------------------
Wellformedness Checks : 

instanceOf's right side is not Technology // we don't emphasize underspecification here
instanceOf's right side is not Language // we don't emphasize underspecification here
For every instanceOf's left side there exists a hasLink relationship if it doesn't start with `?'.
Every Technology uses at least one Language
Every Function is implemented
Every Function is applied at least once
Every Artifact is element of a language
Every Artifact has a manifestation 
Every Artifact has a role

subsetOf is not cyclic
partOf is not cyclic
conformsTo is not cyclic
hasLink's right side is a well formed URI
hasLink's right side provides a link, where a conncection to the web resource is possible.


-----------------------------
Existing Creation order : 
A type is declared before it is used in another subtype or a relation declaration
Instances are declared before they are used in relationships
A relationship is declared before it is used
A language instance is declared before it is used in a function declaration
A function is declared before it is applied
Instances are declared before they are used in function applications
