module common.ConceptKB

import common.Concept

/* Design pattern */
Model-View-Controller : DesignPattern;
    = "wikipedia::Model-view-controller".
ObserverPattern : DesignPattern;
    = "wikipedia::Observer_pattern".

/* Architectural pattern */
Client-Server : ArchitecturalPattern;
    = "https://de.wikipedia.org/wiki/Client-Server-Modell".
REST : ArchitecturalPattern;
    = "wikipedia::Representational_state_transfer".
ServiceOrientedArchitecture : ArchitecturalPattern;
    = "wikipedia::Service-oriented_architecture".

/* Paradigms */
ParallelProgramming : Paradigm;
    = "wikipedia::Parallel_computing".
ConcurrentProgramming : Paradigm; // Programming in a way that enables and manages parallel execution
    = "https://blog.golang.org/concurrency-is-not-parallelism".
ObjectOrientedProgramming : Paradigm; // Thinking of objects and their interrelation
    = "wikipedia::Object-oriented_programming".
FunctionalProgramming : Paradigm; // Programming in a way that resembles formulating mathematical functions
    = "wikipedia::Functional_programming".
RelationalProgramming : Paradigm; // Enabling the representation of entities and their interrelationships.
    = "wikipedia::Relational_model".
ModularProgramming : Paradigm; //Seperation of functionality implementations in modules
    = "wikipedia::Modular_programming".
AspectOrientedProgramming : Paradigm; //Seperation of cross-cutting concerns
    = "wikipedia::Aspect-oriented_programming".
LogicProgramming : Paradigm; //programming based on formal logic
    = "wikipedia::Logic_programming".

/* Programming Domains */
GeneralPurposeProgramming : ProgrammingDomain; // The study on applications in general.
    = "wikipedia::General-purpose_programming_language".
MetaProgramming : ProgrammingDomain; // The study on processing programs with support for language implementation 
    = "wikipedia::Metaprogramming".
DatabaseProgramming : ProgrammingDomain; // The study on how to efficiently store and process data 
    = "http://101companies.org/wiki/Database_programming".
ReverseEngineering : ProgrammingDomain;
    = "wikipedia::Reverse_engineering".
QualityAssurance : ProgrammingDomain;
    = "wikipedia::Software_quality_assurance".
WebBrowsing : ProgrammingDomain;
    = "wikipedia::Web_browser".
WebApplicationDevelopment : ProgrammingDomain;
    = "wikipedia::Web_application_development".
OfflineWebApplicationDevelopment : ProgrammingDomain;
    = "https://developer.mozilla.org/en-US/Apps/Fundamentals/Offline";
    subdomainOf WebApplicationDevelopment.
ModelDrivenEngineering : ProgrammingDomain;
    = "wikipedia::Model-driven_engineering".
SoftwareDocumentation : ProgrammingDomain;
    = "wikipedia::Software_documentation".
GraphicsProgramming : ProgrammingDomain;
    = "wikipedia::Computer_graphics_(computer_science)".
BusinessProgramming : ProgrammingDomain;
    = "wikipedia::Business_software".
EnterpriseResourcePlanning : ProgrammingDomain;
    = "wikipedia::Enterprise_resource_planning";
    subdomainOf BusinessProgramming.
CustomerRelationshipManagement : ProgrammingDomain;
    = "wikipedia::Customer_relationship_management";
    subdomainOf BusinessProgramming.
ProjectManagement : ProgrammingDomain;
    = "wikipedia::Project_management_software".
DocumentManagement : ProgrammingDomain;
    = "wikipedia::Document_management_system".
ECommerce : ProgrammingDomain;
    = "wikipedia::E-commerce";
    subdomainOf BusinessProgramming.
DistributedComputing : ProgrammingDomain;
 	= "wikipedia::Distributed_computing".
DistributedProgramming : ProgrammingDomain;
	= "wikipedia::Distributed_computing".
MachineLearning : ProgrammingDomain;
    = "wikipedia::Machine_learning".
GraphProgramming : ProgrammingDomain; 
    = "wikipedia::Graph_theory".
ConcurrentComputing : ProgrammingDomain;
    = "wikipedia::Concurrent_computing".
ParallelComputing : ProgrammingDomain;
    = "wikipedia::Parallel_computing".
 
/* Technological spaces */
BuildAutomationWare : TechnologySpace;
    = "wikipedia::List_of_build_automation_software".
MDEWare : TechnologySpace;
    = "wikipedia::Model-driven_engineering#Tools".
SoftwareAsAServiceWare : TechnologySpace;
    = "wikipedia::Software_as_a_service".
SQLWare : TechnologySpace;
    = "wikipedia::SQL".
XMLWare : TechnologySpace;
    = "https://www.w3.org/XML/". 
JSONWare : TechnologySpace;
    = "http://www.json.org/".
JavaWare : TechnologySpace;
    = "http://link.springer.com/chapter/10.1007%2F978-3-642-30561-0_6".
ClusterWare : TechnologySpace;
	= "wikipedia::Computer_cluster".
ClusterComputingWare : TechnologySpace;
	= "http://www-bcf.usc.edu/~minlanyu/teach/csci599-fall12/papers/nsdi_spark.pdf";
	subspaceOf ClusterWare.
ClusterManagementWare : TechnologySpace;
 	= "wikipedia::List_of_cluster_management_software";
	subspaceOf ClusterWare.
GraphWare : TechnologySpace;
    = "wikipedia::Category:Application-specific_graphs".

/* Abstract Processes */
PrettyPrinting : AbstractProcess; 
    = "http://101companies.org/wiki/Pretty_printing".
TemplateProcessing : AbstractProcess;
    = "wikipedia::Template_processor".
Compilation : AbstractProcess; //Software translation of a higher level language into a lower level language
    = "wikipedia::Compiler";
    aspectOf MetaProgramming.
Interpretation : AbstractProcess;
    = "wikipedia::Interpreter_(computing)".
Transformation : AbstractProcess; // Takes input data and produces output data. Input and output are elements of a software language that is not a data type.
    = "wikipedia::Data_transformation".
CoarseGrainedTransformation : AbstractProcess;
	="http://www-bcf.usc.edu/~minlanyu/teach/csci599-fall12/papers/nsdi_spark.pdf";
    ="http://stackoverflow.com/questions/26195512/fine-grained-transformation-vs-coarse-grained-transformations";
    refines Transformation.
FineGrainedTransformation : AbstractProcess;
    = "http://stackoverflow.com/questions/26195512/fine-grained-transformation-vs-coarse-grained-transformations";
    refines Transformation.
Validation : AbstractProcess; //Validate quality
    = "wikipedia::Verification_and_validation#Categories_of_validation";
    aspectOf QualityAssurance.
Verification : AbstractProcess; //Correctness Proof
    = "wikipedia::Software_verification";
    aspectOf QualityAssurance.
Rendering : AbstractProcess; //synthesizing an image from some description format
    = "wikipedia::Rendering_(computer_graphics)";
    aspectOf GraphicsProgramming.
Metric : AbstractProcess;
    = "wikipedia::Software_metric";
    aspectOf ReverseEngineering;
    aspectOf QualityAssurance.
CodeCoverage : AbstractProcess; //specific metric
    = "wikipedia::Code_coverage";
    aspectOf QualityAssurance.
Testing : AbstractProcess;
    = "wikipedia::Software_testing";
    aspectOf QualityAssurance.
Persistence : AbstractProcess; //or data binding
    = "http://101companies.org/wiki/Persistence".
Serialization : AbstractProcess;
    = "wikipedia::Serialization";
    refines Persistence.
Mapping : AbstractProcess;
    = "http://101companies.org/wiki/Mapping".
XMLDataBinding : AbstractProcess;
    = "wikipedia::XML_data_binding";
    refines Mapping.
ObjectRelationalMapping : AbstractProcess;
    = "wikipedia::Object-relational_mapping";
    refines Mapping.
ObjectJsonMapping : AbstractProcess;
    = "http://stackoverflow.com/questions/16090464/mapping-json-data-to-java-objects";
    refines Mapping.
Compression : AbstractProcess;
    = "wikipedia::Data_compression".
MapReduce : AbstractProcess;
	= "https://static.googleusercontent.com/media/research.google.com/de//archive/mapreduce-osdi04.pdf";
	aspectOf DistributedProgramming.
Logging : AbstractProcess;
    = "wikipedia::Logfile".
Introspection : AbstractProcess;
    = "wikipedia::Type_introspection";
    aspectOf MetaProgramming.
Reflection : AbstractProcess;
    = "wikipedia::Reflection_(computer_programming)";
    aspectOf MetaProgramming.
ClusterComputing : AbstractProcess;
 	= "http://de.slideshare.net/bosswebtech/cluster-computing-11382951";
 	= "http://gridbus.csse.unimelb.edu.au/papers/ic_cluster.pdf";
 	aspectOf DistributedProgramming.
StreamProcessing : AbstractProcess;
	= "wikipedia::Stream_processing".
HTTP : Protocol;
    = "wikipedia::HTTP".
HTTPS : Protocol ;
    = "wikipedia::HTTPS".
    
/* Known constructs that imply a certain setup and purpose of up to multiple involved artifacts */
Semaphore : Construct; //A flag to control access to a resource in the context of concurrent programs.
    = "wikipedia::Semaphore_(programming)";
    aspectOf ConcurrentProgramming.
Annotation : Construct;
    = "wikipedia::Annotation";
    aspectOf ObjectOrientedProgramming.
SoftwareInterface : Construct;
	= "wikipedia::Interface_(computing)".
Cluster : Construct;
 	= "http://de.slideshare.net/bosswebtech/cluster-computing-11382951";
 	= "http://gridbus.csse.unimelb.edu.au/papers/ic_cluster.pdf";
 	aspectOf DistributedProgramming.
ClusterManager : Construct;
 	= "wikipedia::Cluster_manager";
 	aspectOf DistributedProgramming.
ResourceManagement : Construct; 
	="wikipedia::Resource_management_(computing)".
//A DataFrame is a Dataset organized into named columns.
DataFrame : Construct;
	="https://databricks.com/blog/2015/02/17/introducing-dataframes-in-spark-for-large-scale-data-science.html".
Graph : Construct;
    = "wikipedia::Graph_(discrete_mathematics)".
Object : Construct;
    = "wikipedia::Object_(computer_science)".
Tree : Construct;
    = "wikipedia::Tree_(graph_theory)".
Expression : Construct; //Propose a language of expression not yet evaluated to values (compile-time)
   = "wikipedia::Expression_(computer_science)".

/* Frequently appearing roles that single artifacts may have. */
Configuration : Role;   //settings statements.
    = "wikipedia::Configuration_file".
BuildScript : Role; //Scripts for deploying software such as ANT or Maven files
    = "wikipedia::Software_build".
Grammar : Role;   //syntax definition
    = "wikipedia::Context-free_grammar".
Database : Role;  //any artifact that only stores data
    = "wikipedia::Database".
Schema : Role;  //provide a schema
    = "wikipedia::Database_schema".
Query : Role;  //a search declaration to satisfy information needs of software or humans
    = "wikipedia::Query_language".
MdeModel : Role; // in the sense of MDE
    = "wikipedia::Model-driven_engineering".
MdeMetamodel : Role; // in the sense of MDE
    = "wikipedia::Metamodeling".
Diagram : Role; //a visual representation of a model
    = "wikipedia::Diagram".
MvcModel : Role; //data classes plus minor business logics
    = "wikipedia::Model-view-controller";
    participantOf Model-View-Controller.
MvcView : Role; //classes that serve as the interface to the user as they produce visual output. Most times there is some render() function
    = "wikipedia::Model-view-controller";
    participantOf Model-View-Controller.
MvcController : Role; //Some kind of mediator between model and view, which may execute rather complex computations
    = "wikipedia::Model-view-controller";
    participantOf Model-View-Controller.
Observer : Role;
    = "wikipedia::Observer_pattern";
    participantOf ObserverPattern.
Subject : Role;
    = "wikipedia::Observer_pattern";
    participantOf ObserverPattern.
Value : Role; //A runtime value in the execution process of a program
    = "wikipedia::Value_(computer_science)".
Message : Role; //A message in a communication of software components
    = "wikipedia::Message_passing".
Specification : Role; //Defines some other conceptual entity in either half-formal or formal manner
    = "wikipedia::Specification_(technical_standard)".
Log : Role; //Contains runtime information that is additionally gathered.
    = "wikipedia::Logfile".
DescriptiveModel : Role;  //A model that describes existing software
    = "http://www.businessdictionary.com/definition/descriptive-model.html".
TransformationRule : Role; //A definition for a text- or model-transformation that declares data manipulations.
    = "http://101companies.org/wiki/Transformation".
Reference : Role; //links to some existing entity.
    = "wikipedia::Reference".
SourceCode : Role; // An implementation of functionality
    = "wikipedia::Source_code".
ByteCode : Role; //instructions for a software interpreter such as the JVM
    = "wikipedia::Bytecode".
Executable : Role; //Any artifact that is executed and not only used.
    = "wikipedia::Executable".
WebResource : Role; // Contains information and is deployed on a web server.
    = "wikipedia::Web_resource".
Archive : Role; //A file that has folder functionality, such as .jar or .zip
    = "wikipedia::Archive_file".
Document : Role; //An informal file that is deployed locally 
    = "wikipedia::Document".
Repository : Role; //A database that manages code artifacts and acts as a VCS
    = "wikipedia::Repository_(version_control)".
Module : Role;
    = "wikipedia::Modular_programming".
Interface : Role;
    = "wikipedia::Protocol_(object-oriented_programming)". //weird
TestCase : Role;
    = "wikipedia::Test_case".
POJO : Role;
    = "wikipedia::Plain_Old_Java_Object".
Template : Role;
    = "wikipedia::Template_processor".
Wrapper : Role;
    = "wikipedia::Primitive_wrapper_class".
Server : Role;
    = "wikipedia::Server_(computing)".
Client : Role;
    = "wikipedia::Client_(computing)".
Identifier : Role;
    = "wikipedia::Identifier".
TransactionLog : Role;
    = "wikipedia::Transaction_log".
MapOperation : Role;
	="https://wiki.apache.org/hadoop/HadoopMapReduce";
    ="wikipedia::MapReduce#Map_function".
ReduceOperation : Role;
	="https://wiki.apache.org/hadoop/HadoopMapReduce";
    ="wikipedia::MapReduce#Reduce_function".
SystemState : Role; //an artifact may represent the system state.
	= "wikipedia::State_(computer_science)".
DriverProgram : Role;
	= "wikipedia::Scala_(programming_language)". //TODO: Better link
DataStream : Role;
	= "wikipedia::Data_stream".
Worker : Role;
	="wikipedia::Thread_pool".
Plugin : Role;
    = "wikipedia::Plug-in_(computing)".