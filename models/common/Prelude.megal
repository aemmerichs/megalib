module common.Prelude

import common.Concept
import common.ConceptKB
import common.Language
import common.LanguageKB

/* Digital entities classified by relating to their language, role and manifestation. */
Artifact < Entity;
    = "wikipedia::Artifact_(software_development)".
hasRole < Artifact # Role; 
    = "wikipedia::Terminology".
defines < Artifact # Language; 
    = "wikipedia::Programming_language_specification";
    = "wikipedia::Syntax";
    = "wikipedia::Data_model".
elementOf < Artifact # Language; 
    = "wikipedia::Element_(mathematics)".
conformsTo < Artifact # Artifact;  
    = "springerLink::10.1007%2Fs10270-006-0017-9"; //Matters of Metamodeling
    = "researchgate::243771569_In_Search_of_a_Basic_Principle_for_Model_Driven_Engineering".
correspondsTo < Artifact # Artifact; 
    = "oxfordDict::correspond".
consistentWith < Artifact # Artifact; 
    = "wikipedia::Consistency".
refersTo < Artifact # Artifact;  // Experimental! 
    = "wikipedia::Uniform_Resource_Identifier".
represents < Artifact # Artifact; // Experimental! 
    = "researchgate::243771569_In_Search_of_a_Basic_Principle_for_Model_Driven_Engineering".

/* Manifestation types of artifacts, where most are self-explanatory */
Manifestation < Entity;
    = "oxfordDict::manifestation".
File : Manifestation; 
    = "wikipedia::Computer_file".
File+ : Manifestation; 
    = "wikipedia::Computer_file".
Folder : Manifestation; 
    = "wikipedia::Directory_(computing)".
Transient : Manifestation; 
    = "wikipedia::Transient_(computer_programming)".
Transient+ : Manifestation; 
    = "wikipedia::Transient_(computer_programming)".
Fragment : Manifestation;  
    = "wikipedia::Snippet_(programming)".
manifestsAs < Artifact # Manifestation;
    = "oxfordDict::manifestation".

/* A mapping from an ordered list of input languages to an ordered list of output languages. */
Function < Entity;
    = "wikipedia::Function_(mathematics)".
    
/* TODO: Discussion needed on experimenting with Data flow */
concretizes < Function # AbstractProcess. 
defines < Artifact # Artifact; //Code declares and defines Transients
    = "wikipedia::Declaration_(computer_programming)".
decomposes < Function # Function. //A function can be decomposed into steps


/* A technology is reusable 'third party' Software. See Wiki */
System < Entity;
    = "wikipedia::Software_system".
Technology < System;
    = "wikipedia::Information_technology";
    = "elsevierJournal::information-and-software-technology/".
Library < Technology; 
    = "wikipedia::Library_(computing)".
API < Technology; 
    = "wikipedia::Application_programming_interface".
Framework < Technology; 
    = "wikipedia::Software_framework".
Plugin < Technology; 
    = "wikipedia::Plug-in_(computing)".
Application < Technology; 
    = "wikipedia::Application_software".
SoftwareSuite < Technology;
    = "wikipedia::Software_suite".
Service < Technology;
    = "wikipedia::Service_(systems_architecture)".
Platform < Technology; 
    = "wikipedia::Computing_platform".

IDE < Application; // an environment to facilitate writing systems or technologies.
    = "wikipedia::Integrated_development_environment".
LanguageWorkbench < Application;
    = "wikipedia::Language_workbench".
Compiler < Application;
    = "wikipedia::Compiler".
Interpreter < Application;
    = "wikipedia::Language_interpretation".
FileSystem < Application;
    = "wikipedia::File_system".
WebServer < Application;
  = "wikipedia::Web_server".
OperatingSystem < Platform;
    = "wikipedia::Operating_system".
ParserGenerator < Framework;
    = "wikipedia::Category:Parser_generators".
    
/* Relationship of system components to components of architectural pattern 
Any system that has such a role is a part of a larger system that uses the pattern*/
hasRole < System # Role.

/* Implementation relationships */
implements < System # Function;  
    = "wikipedia::Implementation".
implements < System # Language.  

/* A technology or a language can facilitate the usage or realization of a conceptual description. */
facilitates < Technology # ArchitecturalPattern.
facilitates < Technology # AbstractProcess.
facilitates < Technology # Construct.

/* A software system may help in a problem context */
supports < System # ProgrammingDomain;
    = "wikipedia::Software_feature". //needs better link

/* Technologies and languages may be frequently used in a technological context. 
Specifically mapping technologies can bridge to other technological spaces. */
belongsTo < System # TechnologySpace.
bridgesTo < System # TechnologySpace.


/* A technology is managed by an artifact that serves as a repository. */
managedBy < Technology # Artifact; 
    = "wikipedia::Software_repository".

/* In a usage scenario the technology is locally deployed as an artifact. */
deployedAs < System # Artifact; 
    = "wikipedia::Software_deployment".
    
/* One might further want to specify on which physical component the    
artifact is deployed. 

!!!This block is highly experimental!!!*/

Node < Entity; 
    = "wikipedia::Node_(networking)#Distribute".
Hardware < Entity; 
    = "wikipedia::Computer_hardware".
composedOf < Node # Hardware.
deployedAt < Artifact # Node; 
    = "wikipedia::Software_deployment".
deployedAt < Artifact # Hardware.


/* Part-of relationships */
partOf < Artifact # Artifact;
    = "oxfordDict::part".
partOf < Artifact # System.
partOf < System # System.

/* A language is used in the sense that some part is a member of the language. */
uses < System # Language;
    = "wikipedia::Computer_programming".

/* Something uses a concept, if its implementation or structure is informalle conform to the concept's 
definition. Most times, this is synonymous to 
realization. */
uses < System # ArchitecturalPattern.
uses < System # AbstractProcess.
uses < System # Construct.

/* Systems, technologies and artifacts can be reused. There is always a reference from the using
entity to the used entity. Maybe rename to reuses */
reuses < System # System;
    = "wikipedia::Code_reuse".