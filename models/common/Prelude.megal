module common.Prelude

import common.Concept
import common.ConceptKB
import common.Language
import common.LanguageKB

/* Digital entities classified by relating to their language, role and manifestation. */
Artifact < Entity;
    = "https://en.wikipedia.org/wiki/Artifact_(software_development)".
hasRole < Artifact # Role; 
    = "https://en.wikipedia.org/wiki/Terminology".
defines < Artifact # Language; 
    = "https://en.wikipedia.org/wiki/Programming_language_specification";
    = "https://en.wikipedia.org/wiki/Syntax";
    = "https://en.wikipedia.org/wiki/Data_model".
elementOf < Artifact # Language; 
    = "https://en.wikipedia.org/wiki/Element_(mathematics)".
conformsTo < Artifact # Artifact;  
    = "http://link.springer.com/article/10.1007%2Fs10270-006-0017-9";
    = "https://www.researchgate.net/publication/243771569_In_Search_of_a_Basic_Principle_for_Model_Driven_Engineering".
correspondsTo < Artifact # Artifact; 
    = "http://dictionary.cambridge.org/dictionary/english/correspond".
consistentWith < Artifact # Artifact; changes, b has to be adapted.
    = "https://en.wikipedia.org/wiki/Consistency".
refersTo < Artifact # Artifact;  // Experimental! 
    = "https://en.wikipedia.org/wiki/Uniform_Resource_Identifier".
represents < Artifact # Artifact; // Experimental! 
    = "https://www.researchgate.net/publication/243771569_In_Search_of_a_Basic_Principle_for_Model_Driven_Engineering".

/* Manifestation types of artifacts, where most are self-explanatory */
Manifestation < Entity;
    = "https://en.oxforddictionaries.com/definition/manifestation".
File : Manifestation; 
    = "https://en.wikipedia.org/wiki/Computer_file".
File+ : Manifestation; 
    = "https://en.wikipedia.org/wiki/Computer_file".
Folder : Manifestation; 
    = "https://en.wikipedia.org/wiki/Directory_(computing)".
Transient : Manifestation; 
    = "https://en.wikipedia.org/wiki/Transient_(computer_programming)".
Fragment : Manifestation;  
    = "https://en.wikipedia.org/wiki/Snippet_(programming)".
manifestsAs < Artifact # Manifestation;
    = "https://en.oxforddictionaries.com/definition/manifestation".

/* A mapping from an ordered list of input languages to an ordered list of output languages. */
Function < Entity;
    = "https://en.wikipedia.org/wiki/Function_(mathematics)".

/* A technology is reusable 'third party' Software. See Wiki */
System < Entity;
    = "https://en.wikipedia.org/wiki/Software_system".
Technology < System;
    = "https://en.wikipedia.org/wiki/Information_technology";
    = "https://www.journals.elsevier.com/information-and-software-technology/".
Library < Technology; 
    = "https://en.wikipedia.org/wiki/Library_(computing)".
API < Technology; 
    = "https://en.wikipedia.org/wiki/Application_programming_interface".
Framework < Technology; 
    = "https://en.wikipedia.org/wiki/Software_framework".
Plugin < Technology; 
    = "https://en.wikipedia.org/wiki/Plug-in_(computing)".
Application < Technology; 
    = "https://en.wikipedia.org/wiki/Application_software".
Service < Technology;
    = "https://en.wikipedia.org/wiki/Service_(systems_architecture)".
Platform < Technology; 
    = "https://en.wikipedia.org/wiki/Computing_platform".

IDE < Application; // an environment to facilitate writing systems or technologies.
    = "https://en.wikipedia.org/wiki/Integrated_development_environment".
LanguageWorkbench < Application;
    = "https://en.wikipedia.org/wiki/Language_workbench".
Interpreter < Application;
    = "https://en.wikipedia.org/wiki/Language_interpretation".
FileSystem < Application;
    = "https://en.wikipedia.org/wiki/File_system".
OperatingSystem < Platform;
    = "https://en.wikipedia.org/wiki/Operating_system".

/* Implementation relationships */
implements < System # Function;  
    = "https://en.wikipedia.org/wiki/Implementation".
implements < System # Language.  

/* A technology or a language can facilitate the usage or realization of a conceptual description. */
facilitates < Technology # DesignPattern.
facilitates < Technology # ArchitecturalPattern.
facilitates < Technology # AbstractProcess.
facilitates < Technology # Construct.

/* A software system may help in a problem context */
supports < System # ProgrammingDomain;
    = "https://en.wikipedia.org/wiki/Software_feature". //needs better link

/* Technologies and languages may be frequently used in a technological context. 
Specifically mapping technologies can bridge to other technological spaces. */
belongsTo < System # TechnologySpace.
bridgesTo < System # TechnologySpace.


/* A technology is managed by an artifact that serves as a repository. */
managedBy < Technology # Artifact; 
    = "https://en.wikipedia.org/wiki/Software_repository".

/* In a usage scenario the technology is locally deployed as an artifact.
One might further want to specify on which physical component the artifact
is deployed. */
deployedAs < System # Artifact; 
    = "https://en.wikipedia.org/wiki/Software_deployment".
Node < Entity; 
    = "https://en.wikipedia.org/wiki/Node_(networking)#Distribute".
Hardware < Entity;
    = "https://en.wikipedia.org/wiki/Computer_hardware".
composedOf < Hardware # Node.
deployedAt < Artifact # Node; 
    = "https://en.wikipedia.org/wiki/Software_deployment".
deployedAt < Artifact # Hardware.


/* Part-of relationships */
partOf < Artifact # Artifact;
    = "http://dictionary.cambridge.org/dictionary/english/part".
partOf < Artifact # System.
partOf < System # System.

/* A language is used in the sense that some part is a member of the language. */
uses < System # Language;
    = "https://en.wikipedia.org/wiki/Computer_programming".

/* Something uses a concept, if its implementation or structure is informalle conform to the concept's 
definition. Most times, this is synonymous to 
realization. */
uses < System # DesignPattern.
uses < System # ArchitecturalPattern.
uses < System # AbstractProcess.
uses < System # Construct.

/* Systems, technologies and artifacts can be reused. There is always a reference from the using
entity to the used entity. Maybe rename to reuses */
reuses < System # System;
    = "https://en.wikipedia.org/wiki/Code_reuse".