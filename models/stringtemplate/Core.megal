module stringtemplate.Core

import java.JavaPlatform

/* StringTemplate is a library written in Java by the ANTLR guy that
supports pretty printing. */
StringTemplate : Library;
    = "http://www.stringtemplate.org/";
    facilitates TemplateProcessing;
    facilitates PrettyPrinting;
    uses Java.
StringTemplateLanguage : TemplateLanguage;
    = "https://github.com/antlr/stringtemplate4/blob/master/doc/index.md#templates";
    ^implements StringTemplate.
    
/* The template language is embedded into Java by wrapping it into an object */
StringTemplateObject : ValueLanguage;
    = "https://github.com/antlr/stringtemplate4/blob/master/src/org/stringtemplate/v4/ST.java";
    ^implements StringTemplate;
    subsetOf JVMObjectLanguage .
wrap : StringTemplateLanguage -> StringTemplateObject.
StringTemplate implements wrap.
?template : File;
    elementOf StringTemplateLanguage;
    hasRole Template.
?stObject1 : Transient;
    elementOf StringTemplateObject;
    hasRole Template;
    hasRole Wrapper.
wrap(?template) |-> ?stObject1.
   
/* The template can then be filled with concrete values by calling the toString method 
of an input object */
setVar : JVMString # JVMObjectLanguage # StringTemplateObject -> StringTemplateObject.
StringTemplate implements setVar.
?variable : Transient;
    elementOf JVMString;
    hasRole Identifier.
?value : Transient;
    elementOf JVMObjectLanguage.
?stObject2 : Transient;
    elementOf StringTemplateObject;
    hasRole Template;
    hasRole Wrapper.
setVar(?variable,?value,?stObject1) |-> ?stObject2 .

/* The render function can then be used to unwrap the produced String */
render : StringTemplateObject -> JVMString.
StringTemplate implements render.
?prettyPrintedString : Transient;
    elementOf JVMString.
render(?stObject2) |-> ?prettyPrintedString.


//TODO: Combined ANTLR and StringTemplate as noted at StringTemplate's doc
//TODO: StringTemplate can be used with other languages