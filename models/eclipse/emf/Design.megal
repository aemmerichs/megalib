module eclipse.emf.Design

import eclipse.emf.dsl.Editor


/* First let's see what design patterns are actually used
in the generated code. We found evidence for the following 
usages. Most interestingly we were able to find all the evidence 
in the 3k+ LoC class "ItemProviderAdapter".  */
EMF facilitates ModelViewController; //It reads now like MVC is not used since Controller and View cannot be separated... Mentioning this might only be confusing.
    facilitates AdapterPattern;
    facilitates ObserverPattern;
    facilitates CommandPattern;
    facilitates AbstractFactoryPattern; //implementation detail
    facilitates TemplateMethodPattern; //implementation detail
    facilitates DecoratorPattern. //implementation detail


/* Well first from an abstract perspective, it is already 
clear that for any generated set of plugins the relation to MVC
can be identified. */
?DslModelPlugin hasRole MvcModel.
?DslEditPlugin hasRole MvcController.
?DslEditorPlugin hasRole MvcView;
    reuses JFace.


/* The Adapter pattern is present in the EMF implementation and is 
presumably hard to grasp. http://www.eclipse.org/forums/index.php?t=msg&th=129825/ 
First we can identify the abstract classes for important roles. */
?DslEditorCode hasRole AdapterClient. //One accesses the adapters through the factory??
AdapterInterface : Artifact;
    = "org.eclipse.emf.common.notify.Adapter";
    elementOf Java;
    hasRole Interface;
    hasRole AbstractAdapter;
    manifestsAs File;
    partOf EmfCorePlugin.
Notifier : Artifact;
    = "org.eclipse.emf.common.notify.Notifier"; //This would rather be EObject
    elementOf Java;
    hasRole Interface;
    hasRole AbstractAdaptee;
    manifestsAs File;
    partOf EmfCorePlugin.

/* For every model class in the model, there exists an item provider.
The item provider implementations for each model class extend 
the class ItemProviderAdapter that is actually complicated with about 3000+ LoC. */
INotifyChangedListener : Artifact;
    hasRole AbstractSubject
AdapterFactoryLabelProvider : Artifact;
    conformsTo INotifyChangedListener;
    hasRole Observer.
ItemProviderAdapter : Artifact;
    elementOf Java;
    manifestsAs File;
    hasRole ConcreteAdapter;
    partOf ?EmfEdit.

?dslItemProvider : Artifact;
    hasRole Adapter;
    hasRole MvcController;
    hasRole ConcreteSubject; //Verified this one
    elementOf JVMObject;
    manifestsAs Transient;
    conformsTo ItemProviderAdapter.
?dslEObject hasRole Adaptee;
    hasRole MvcModel.
?dslResource hasRole Adaptee.
?dslResourceSet hasRole Adaptee.
?dslEditor hasRole AdapterClient;
    hasRole MvcView.

/* Actually the next thing is shown here: http://help.eclipse.org/neon/topic/org.eclipse.emf.doc/references/overview/images/EMF.Edit/image007.gif
This is what makes it hard to get. This one single class has many jobs at once. 
When something is read, the adapter actually implements interfaces to retrieve content and label information
When the editor writes something, the adapter implements interfaces to create and "push" commands to 
edit the model through the AdapterFactory.
 */
 
 
 
/* The Command pattern seems to be actually used only in existing Java-classes.
One could use @override for createCommand, but we don't have any */
CommandInterface : Artifact; //implementation detail
    ~= "developmentPlatform::org.eclipse.emf.common_2.12.0.v20160420-0247.jar/org/eclipse/emf/common/command/Command.java"
    elementOf Java;
    hasRole AbstractCommand;
    manifestsAs File.
CommandStackInterface : Artifact; //implementation detail
    ~= "developmentPlatform::org.eclipse.emf.common_2.12.0.v20160420-0247.jar/org/eclipse/emf/common/command/CommandStack.java";
    elementOf Java;
    hasRole AbstractCommandStack;
    hasRole AbstractSubject;
    manifestsAs File.
CommandStackListenerInterface : Artifact; //implementation detail
    ~= "developmentPlatform::org.eclipse.emf.common_2.12.0.v20160420-0247.jar/org/eclipse/emf/common/command/CommandStackListener.java";
    elementOf Java;
    hasRole AbstractObserver;
    manifestsAs File.
    


/* EMF actually facilitates the usage of the decorator Design pattern */
IItemProviderDecorator : Artifact;
    hasRole DecoratorAbstractDecorator
IChangeNotifier hasRole DecoratorAbstractComponent.



