module eclipse.emf.dsl.Model

import eclipse.emf.EMF
import java.JavaPlatform

/* Plugin overview*/
?dslmodelpluginjar : Artifact;
    elementOf Jar;
    manifestsAs File;
    partOf ?DevelopmentWorkspace.
?DSLModelPlugin : Plugin;
    reuses EclipseCoreRuntime;
    reuses EMF.ECore;
    deployedAs ?dslmodelpluginjar.

/* While Ecore is the language for metamodels written in XMI, there are multiple existing
languages that are subset of XMI that form DSLs. But this set to serialize models in XMI 
is different from the metamodeling set. */
?DslJvmObjects : ValueLanguage;
    subsetOf JVMObject.
?DslXmi : DataExchangeLanguage; //TODO: Defined or Implemented? keep it or remove it
    subsetOf XMI.
?dslGenModel : Artifact;
    partOf ?DevelopmentWorkspace;
    elementOf GeneratorXmi;
    hasRole Configuration;
    manifestsAs File.
?dslJavaModel : Artifact;
    partOf ?DevelopmentWorkspace;
    elementOf EcoreJava;
    hasRole MdeMetamodel;
    manifestsAs File+;
    defines ?DslJvmObjects.
?dslMetaModel : Artifact;
    partOf ?DevelopmentWorkspace;
    elementOf EcoreXMI;
    hasRole MdeMetamodel;
    manifestsAs File;
    defines ?DslXmi.
generateJava(?dslGenModel,?dslMetaModel) |-> ?dslJavaModel.

/* Object and XMI */
?dslModel : Artifact;
    partOf ?RuntimeWorkspace;
    elementOf ?DslXmi;
    hasRole MdeModel;
    manifestsAs File.
?dslJvmObject : Artifact;
    partOf ?RuntimeWorkspace;
    elementOf ?DslJvmObjects;
    manifestsAs Transient;
    hasRole MdeModel;
    correspondsTo ?dslModel.

/* Generic XMI Persistence */ 
saveDSLModel : ?DslJvmObjects -> ?DslXmi.
EMF.Persistence implements saveDSLModel.
saveDSLModel(?dslJvmObject) |-> ?dslModel.
loadDSLModel : ?DslXmi # EcoreJava -> ?DslJvmObjects.
EMF.Persistence implements loadDSLModel.
loadDSLModel(?dslModel,?dslJavaModel) |-> ?dslJvmObject.

//TODO: Validation
//@generated NOT: added fragments that are just copied when repeating generateJava. This goes for model, edit and editor.