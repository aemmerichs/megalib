module mysql.MySQL

import dotnet.DotNet

/* MySQL offers a workbench to assist in editing 
databases encoded in MySQL's specific database image 
format. */
MySQLImage : DatabaseLanguage;
    = "http://dev.mysql.com/doc/refman/5.7/en/what-is-mysql.html";
    encodedAs Binary.
MySQL : SoftwareSuite;
    = "https://en.wikipedia.org/wiki/MySQL";
    supports DatabaseProgramming;
    uses C;
    uses C++;
    implements SQL;
    implements MySQLImage;
    belongsTo SQLWare.

/* The workbench implements the basic three operations: 
Create, Read, Update and Delete, where Delete is also a
form of an update as it can be described with the same
function. */
?QueryOutput : DataExchangeLanguage.
create : SQLDDL # MySQLImage -> MySQLImage.
read : SQLQuery # MySQLImage -> ?QueryOutput.
update : SQLDML # MySQLImage -> MySQLImage.
MySQLWorkBench : IDE;
    = "https://en.wikipedia.org/wiki/MySQL_Workbench";
    reuses MySQL;
    uses C++;
    uses C#;
    uses ObjectiveC;
    implements SQLDDL;
    implements create;
    implements SQLQuery;
    implements read;
    implements SQLDML;
    implements update.

/* An abstract scenario for Create takes an initial database
and a create statement and returns the extended database. */
?databasec0 : File;
    elementOf MySQLImage;
    hasRole Database.
?databasec1 : File;
    elementOf MySQLImage;
    hasRole Database.
?createStmt : Transient;
    elementOf SQLDDL;
    hasRole Schema.
create(?createStmt,?databasec0) |-> ?databasec1.
?databasec0 partOf ?databasec1. // ?? maybe interesting

/* An abstract scenario for Read takes a database and an SQL
query statement and returns a String that is formatted according
to the Select statement. 

TODO : Is there conformity in output?*/
?databaser : File;
    elementOf MySQLImage;
    hasRole Database.
?query : Transient;
    elementOf SQLQuery;
    hasRole Query.
?resultTable : Transient;
    elementOf ?QueryOutput.
read(?query,?databaser) |-> ?resultTable.

/* An abstract scenario for Update takes an initial database
and an SQL Insert or Delete statement and returns the transformed
database. */
?databaseu0 : File;
    elementOf MySQLImage;
    hasRole Database.
?databaseu1 : File;
    elementOf MySQLImage;
    hasRole Database.
?updateStmt : Transient;
    elementOf SQLDML;
    hasRole TransformationRule.
update(?updateStmt,?databaseu0) |-> ?databaseu1.