module emf.application.GenerateDSL

import emf.model.EcoreImpl where { ... }
import emf.model.GenmodelImpl where { ... }
import emf.persistence.GenericXmi where { 
    [ 
        ?genmodelResource / ?dslResource,
        ?genmodelFile / ?dslFile,
        ?genmodelEObject / ?dslEObject
    ],
    [ 
        ?ecoreResource / ?dslResource,
        ?ecoreFile / ?dslFile
    ]
}
import emf.model.Impl

/* The input of a code generation process is a genmodel. This genmodel 
exists as an XMI file first and is deserialized */
//++ ?genmodelFile : Artifact
//++ ?genmodelResource : Transient
?genmodelResource refersTo ?ecoreResource.
//++ ?genmodelEObject : Transient+
//++		partOf ?genmodelResource
//++ deserialize (?genmodelFile) |-> ?genmodelResource

/* The next step is to generate Java code from the genmodel */
EcoreJava : ProgrammingLanguage;
    subsetOf Java;
    ^implements EMF. //TODO: Refine this simplification
//++ EObjectGenmodelLanguage : ValueLanguage
//++ 	subsetOf EObjectLanguage
generateJava : EObjectGenmodelLanguage -> EcoreJava.
?DSLModelPlugin : Plugin.
//++ ?dslJavaModel : Artifact
?dslJavaModel partOf ?DSLModelPlugin.
generateJava (?GenmodelEObject) |-> ?dslJavaModel.

/* Now one can see that there is a correspondence between an EClass
and a generated model class */
//++ ?dslJavaModelClass : Artifact
//++	partOf ?dslJavaModel
//++ ?ecoreFile : Artifact
//++ ?ecoreEClass : Artifact
//++ manifestsAs Fragment
?ecoreEClass correspondsTo ?dslJavaModelClass.
//++ partOf ?ecoreFile

/* The former mentioned relation between inputs and outputs is only true
for the initial code generation. Once the code is generated one may 
add code to it. If any added or manually changed code is marked with 
@generated NOT and one has to redo the code generation, the code generator 
copies the annotated fragments. */
reload : GeneratorXmi # Java -> Java.
Emf.CodeGenerator implements reload.  
?dslImplementation0 : Artifact;
    elementOf EcoreJava;
    hasRole MdeMetamodel;
    manifestsAs File+.
generateJava(?generator,?ecoreModel) |-> ?dslImplementation0.
?dslImplementation1 : Artifact;
    elementOf Java;
    manifestsAs File+.
?dslCustomFragment : Artifact;
    elementOf Java;
    partOf ?dslImplementation1;
    manifestsAs Fragment.
reload(?generator, ?dslImplementation1) |-> ?dslImplementation1.    