module emf.model.Base

import emf.Core

/* The most basic statement is that there is some object that is an instance of EObject
in every model at runtime. */
//++ Emf.ECore : Plugin;
//++ 	= "emfJavaDoc::";
//++ 	partOf Emf;
//++ 	uses Java.

//++ EObjectLanguage : ValueLanguage; 
//++ 	= "ecorePluginNS::org/eclipse/emf/ecore/EObject".
//++ 	= "emfJavaDoc::ecore/EObject.html";
//++ 	subsetOf JVMObjects.
//++ ecoreMetaModel : Artifact;
//++ 	~= "ecorePluginNS::org/eclipse/emf/ecore".
//++ 	elementOf Java;
//++ 	hasRole MdeMetamodel;
//++ 	partOf Emf.ECore;
//++ 	conformsTo ecoreMetaModel;
//++ 	defines EObjectLanguage.

?eObject : Transient;
    elementOf EObjectLanguage;
    conformsTo ecoreMetaModel;
    hasRole MdeModel.

/* Further, any such EObject instance is part of a resource that corresponds to a 
serialized file and the resource is part of a resource set. Any resource set can 
be accessed through a registry. This way, Resource Management is supported.  */
resourceSetClass : File;
	~= "ecorePluginNS::org/eclipse/emf/ecore/resource/ResourceSet.java"; 
	elementOf Java.
ResourceLanguage : ValueLanguage;
    = "http://download.eclipse.org/modeling/emf/emf/javadoc/2.5.0/org/eclipse/emf/ecore/resource/Resource.html";
    subsetOf JVMObjects.
resourceClass : File;
	~= "ecorePluginNS::org/eclipse/emf/ecore/resource/Resource.java"; 
    defines ResourceLanguage;
	elementOf Java.
?resourceFactoryRegistry : Transient;
    elementOf JVMObjects.
?resourceSet : Transient;
    elementOf JVMObjects;
	conformsTo resourceSetClass;
	partOf ?resourceFactoryRegistry.    
?resource : Transient;
    partOf ?resourceSet;
    ^partOf ?eObject;
    elementOf ResourceLanguage.