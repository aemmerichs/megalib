module antlr.Parsing

import antlr.CodeGeneration
import antlr.App

/*
@Description: 
    Any language could be defined by a grammar that serves as an input.
@Rationale:
    We need a placeholder for any input language that is processed,
    any grammar that ANTLR is supposed to process 
    and any input file that shall be parsed.
*/
?input : Artifact;
	manifestsAs File;
	elementOf ?InputLanguage;
	conformsTo ?grammar. 
	
/*
@Description:
    ANTLR parser is preceded by a lexical analysis, which converts characters to tokens.
@Rationale:
    See how ANTLR realizes the lexical analysis
*/
TokenStreamLanguage : ValueLanguage;
	="https://github.com/antlr/antlr4/blob/46b3aa98cc8d8b6908c2cabb64a9587b6b973e6c/runtime/Java/src/org/antlr/v4/runtime/CommonTokenStream.java";
	subsetOf JVMObjectLanguage;
    ^implements ANTLR.
lex : ?InputLanguage -> TokenStreamLanguage.
?App implements lex;
    uses LexicalAnalysis.
?tokenstream : Artifact;
	manifestsAs Transient;
	elementOf TokenStreamLanguage.
lex(?input) |-> ?tokenstream.

/*
@Description:
    A parser is a software component that takes text as input and 
    builds an intermediate data structure.
@Rationale:
    See how ANTLR realizes the Parsing process
*/

ConcreteSyntaxTreeLanguage : ValueLanguage;
    = "https://github.com/antlr/antlr4/blob/master/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTree.java";
	subsetOf JVMObjectLanguage.
parse : TokenStreamLanguage -> ConcreteSyntaxTreeLanguage.
?App implements parse;
    uses Parsing.

?concreteSyntaxTree : Artifact;
	manifestsAs Transient;
	elementOf ConcreteSyntaxTreeLanguage.
parse(?tokenstream) |-> (?concreteSyntaxTree).

/*
@Description:
    Language for Lexer and Parser objects
@Rationale:
    We need these to what kind of objects are I/O in functions
*/
LexerLanguage : ValueLanguage;
	="https://github.com/antlr/antlr4/blob/master/doc/lexer-rules.md";
	subsetOf JVMObjectLanguage.	
ParserLanguage : ValueLanguage;
	="https://github.com/antlr/antlr4/blob/master/doc/parser-rules.md";
	subsetOf JVMObjectLanguage.
antlrLexer : Artifact;
	~="https://github.com/antlr/antlr4/blob/master/runtime/Java/src/org/antlr/v4/runtime/Lexer.java";
    elementOf Java;
    manifestsAs File.
antlrParser : Artifact;
	~="https://github.com/antlr/antlr4/blob/master/runtime/Java/src/org/antlr/v4/runtime/Parser.java";
    elementOf Java;
    manifestsAs File.