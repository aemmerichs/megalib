module antlr.demo.checker.Core

import antlr.App where {
    Checker / ?App,
    MegaL / ?InputLanguage
}
/*
@Description:
The Checker helps the user to find syntactical errors in a megamodel written in MegaL.

@Rationale:
See https://github.com/softlang/megalib/
*/
MEGALIB :: "https://github.com/softlang/megalib".
MegaL : KnowledgeRepresentationLanguage;
    = "MEGALIB::wiki".
Checker = "MEGALIB::blob/master/checker/src/org/java/megalib/checker";
    implements MegaL.

/*
@Description:
the checker takes the model as input and returns a list of problems.

@Rationale:
See https://github.com/softlang/megalib/...
*/
checkModel : MegaL -> JVMObjectLanguage .

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
lexing and parsing with listener and error-listener
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
as described in JavaANTLR, JavaANTLRListenerForParser and JavaANTLRErrorlistener:
lexing
	lex(?someMegaModel) |-> ?tokenstream.
adding listeners
	?parserObject conformsTo ?ANTLRJavaParserFiles.	
	addListener(?parserObject, ?ParserErrorListener) |-> ?parserObjectWithErrorListener.
	addListener(?parserObject, ?aNTLRParserListener) |-> ?parserObjectWithANTLRListener.
parsing
	parse(?tokens, ?parserObjectWithErrorListener) |-> (?concreteSyntaxTree, ?parserObjectWithListenersAfterApplication).
returning listeners
	getErrorListeners(?parserObjectWithListenersAfterApplication) |-> ?returnedParserErrorListeners.
	getListeners(?parserObjectWithListenersAfterApplication) |-> ?returnedANTLRParserListeners.
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
returning errors
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple loop iterates over the Error-Listeners and the program returns a message, if there are any parsing-errors recorded in any of the Error-Listeners.
In this example, no errors are returned. If there were any errors, no megaModel could be returned and the example would end at this point.
*/
getErrors: ErrorListenerObjectsLanguage -> JVMString.
checker implements getErrors.
?noErrors : Artifact;
	manifestsAs Transient;
	elementOf JVMString.
getErrors(?returnedParserErrorListeners) |-> ?noErrors.

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
returning megaModel Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The megaModel, which was created during parsing, with the help of the listener, is returned here.
*/
MegaModelObjectLanguage : Language;
	subsetOf JVMObject.
?megaModel : Artifact;
	manifestsAs Transient;
	elementOf MegaModelObjectLanguage.
getMegaModel : ANTLRListenerObjectsLanguage -> MegaModelObjectLanguage.
checker implements getMegaModel.
getMegaModel (?returnedANTLRParserListeners) |-> (?megaModel).

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
finding and returning warnings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The checker finds warnings (like missing links or manifestations of artifacts) in the model and returns them.
*/
getWarnings: MegaModelObjectLanguage -> JVMList.
checker implements getWarnings.
?warnings : Artifact;
	manifestsAs Transient;
	elementOf JVMList.
getWarnings(?megaModel) |-> ?warnings.

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bindings for artifacts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
checkerLexer = "https://github.com/softlang/megalib/tree/master/checker".
checkerParser = "https://github.com/softlang/megalib/tree/master/checker".

CheckerErrorListener = "https://github.com/softlang/megalib/tree/master/checker".
MegaModelObjectLanguage = "https://github.com/softlang/megalib/tree/master/checker".