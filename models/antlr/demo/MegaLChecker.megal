module antlr.demo.MegaLChecker
import antlr.ErrorlistenerForParser where {
	[
		checker / ?App,
		megaL / ?InputLanguage, 
		checkerGrammar / ?grammar,
		checkerLexer / ?ANTLRJavaLexer, 
		checkerParser / ?ANTLRJavaParser, 
		checkerParserFiles / ?ANTLRJavaParserFiles, 
		checkerLexerFiles / ?ANTLRJavaLexerFiles,
		?someMegaModel / ?input,
		CheckerErrorListener / ?ErrorListener,
		?parserObjectWithListenersAfterApplication / ?parserObjectWithErrorListenerAfterApplication
	]
} 
import antlr.ListenerForParser where{
	[
		checker / ?App,
		megaL / ?InputLanguage, 
		checkerGrammar / ?grammar,
		checkerLexer / ?ANTLRJavaLexer, 
		checkerParser / ?ANTLRJavaParser, 
		checkerParserFiles / ?ANTLRJavaParserFiles, 
		checkerLexerFiles / ?ANTLRJavaLexerFiles,
		?someMegaModel / ?input,
		CheckerModelListener / ?ANTLRListener, // System
		checkerModelListener / ?aNTLRParserListener, // Artifact <JVMObject>
		?parserObjectWithListenersAfterApplication / ?parserObjectWithANTLRListenerAfterApplication
	]
}
/*
The Checker is a programm written by Marcel Heinz, which helps  the user to find syntactical errors in a megamodel. 

The checker parses the megamodel and all necessary imports. 

An ErrorListener will be attached to the parser. When Errors are detected, the checker will quit and return an errorMessage.

A parser-listener will also be attached to the parser and create a new java-object for the mega-model. In a second step, the checker take the model as input and returns a list of problems, in case there are any.
 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Main Programm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
//megaL : ProgrammingLanguage.
megaL = "https://github.com/softlang/megalib/wiki".
megaL = "https://github.com/softlang/megalib/tree/master/docs".
checker = "https://github.com/softlang/megalib/blob/master/checker/src/org/java/megalib/checker".

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
generating lexer and parser
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
as described in JavaANTLR:
generateLexer(checkerGrammar) |-> checkerLexerFiles.
generateParser(checkerGrammar) |-> checkerParserFiles.
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
lexing and parsing with listener and error-listener
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
megaL ="https://github.com/softlang/megalib".
as described in JavaANTLR, JavaANTLRListenerForParser and JavaANTLRErrorlistener:
lexing
	lex(?someMegaModel) |-> ?tokens.
adding listeners
	?parserObject conformsTo ?ANTLRJavaParserFiles.	
	addListener(?parserObject, ?ParserErrorListener) |-> ?parserObjectWithErrorListener.
	addListener(?parserObject, ?aNTLRParserListener) |-> ?parserObjectWithANTLRListener.
parsing
	parse(?tokens, ?parserObjectWithErrorListener) |-> (?concreteSyntaxTree, ?parserObjectWithListenersAfterApplication).
returning listeners
	getErrorListeners(?parserObjectWithListenersAfterApplication) |-> ?returnedParserErrorListeners.
	getListeners(?parserObjectWithListenersAfterApplication) |-> ?returnedANTLRParserListeners.
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
returning errors
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple loop iterates over the Error-Listeners and the program returns a message, if there are any parsing-errors recorded in any of the Error-Listeners.
In this example, no errors are returned. If there were any errors, no megaModel could be returned and the example would end at this point.
*/
getErrors: ErrorListenerObjectsLanguage -> JVMString.
checker implements getErrors.
?noErrors : Artifact;
	manifestsAs Transient;
	elementOf JVMString.
getErrors(?returnedParserErrorListeners) |-> ?noErrors.

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
returning megaModel Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The megaModel, which was created during parsing, with the help of the listener, is returned here.
*/
MegaModelObjectLanguage : Language;
	subsetOf JVMObject.
?megaModel : Artifact;
	manifestsAs Transient;
	elementOf MegaModelObjectLanguage.
getMegaModel : ANTLRListenerObjectsLanguage -> MegaModelObjectLanguage.
checker implements getMegaModel.
getMegaModel (?returnedANTLRParserListeners) |-> (?megaModel).

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
finding and returning warnings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The checker finds warnings (like missing links or manifestations of artifacts) in the model and returns them.
*/
getWarnings: MegaModelObjectLanguage -> JVMList.
checker implements getWarnings.
?warnings : Artifact;
	manifestsAs Transient;
	elementOf JVMList.
getWarnings(?megaModel) |-> ?warnings.

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bindings for artifacts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
checkerGrammar = "https://github.com/softlang/megalib/tree/master/checker/src/main/antlr/techdocgrammar".
checkerLexer = "https://github.com/softlang/megalib/tree/master/checker".
checkerParser = "https://github.com/softlang/megalib/tree/master/checker".
checkerLexerFiles  = "https://github.com/softlang/megalib/tree/master/checker".
checkerParserFiles = "https://github.com/softlang/megalib/tree/master/checker".
CheckerErrorListener = "https://github.com/softlang/megalib/tree/master/checker".
MegaModelObjectLanguage = "https://github.com/softlang/megalib/tree/master/checker".

checkerGrammar ~= "file://../../megalib-master/checker/src/main/antlr/techdocgrammar/Megalib.g4".
checkerLexerFiles ~= "file://../../megalib-master/checker/target/generated-sources/antlr4/main/antlr/techdocgrammar/MegalibLexer.java".
checkerParserFiles ~= "file://../../megalib-master/checker/target/generated-sources/antlr4/main/antlr/techdocgrammar/MegalibParser.java".