module opengl.demo.Simple2DTriangle.Objects

import opengl.Objects.Buffer where {
    [
        vertexBuffer / ?buffer,
        vertexBufferStorage /?bufferStorage
    ];
    [
        colorBuffer / ?buffer,
        colorBufferStorage / ?bufferStorage
    ]
}

import opengl.Objects.VertexArray where {
    [ 
        vertexArray / ?vertexArray ,
        vaaVertices / ?vertexAttributeArray,
        vaaColors / ?vertexAttributeArray
    ]
}

import opengl.Objects.Framebuffer where {
    [ 
        defaultFramebuffer / ?framebuffer,
        defaultFramebufferTexture / ?attachedTextures
    ]
}

import opengl.Objects.Shader where {
    [
        vertexShader / ?shader,
        vertexShaderSource / ?shaderSource,
        vertexShaderBinary / ?shaderBinary
    ];
    [
        fragmentShader / ?shader,
        fragmentShaderSource / ?shaderSource,
        fragmentShaderBinary / ?shaderBinary
    ]
}

import opengl.Objects.Program where {
    [
        shaderProgram / ?program,
        vertexShader / ?attachedShaders,
        fragmentShader / ?attachedShaders
    ]
}

//
// Buffer Objects
//

/* The default FBO (frame buffer object), created at context initialization. */
defaultFramebuffer ~= "file://../code/src/executables/Ex01_SimpleTriangle/main.cpp#line=52";
    = "glwiki::Default_Framebuffer".

///* Beside the depth texture, one of the default textures of the FBO. (this texture is displayed on the screen) */
//++?texture : Transient;
//++    = "glwiki::Texture";
//++    elementOf ?TextureStorageLanguage.
//texture partOf defaultFramebuffer.

/* Stores vertex positions. */
//++?buffer : Transient;
//++    = "glwiki::Buffer_Object".
vertexBuffer ~= "file://../code/src/executables/Ex01_SimpleTriangle/main.cpp#lines=86-89";
    ~= "file://../code/src/shaders/Examples/ex01_simpleTriangle.vert#line=4".
//The buffer storage is generated by calling glBufferData.
vertexBufferStorage ~= "file://../code/src/executables/Ex01_SimpleTriangle/main.cpp#line=89".
    
/* Stores color values for each vertex. */
//++?buffer : Transient;
//++    = "glwiki::Buffer_Object".
colorBuffer ~= "file://../code/src/executables/Ex01_SimpleTriangle/main.cpp#lines=92-95";
    ~= "file://../code/src/shaders/Examples/ex01_simpleTriangle.vert#line=5".
//The buffer storage is generated by calling glBufferData.
colorBufferStorage ~= "file://../code/src/executables/Ex01_SimpleTriangle/main.cpp#line=95".
    
//
// Vertex Array Object
//

/* All information about the object to be rendered. */
//++?vertexArray : Transient;
//++    = "glwiki::Vertex_Specification#Vertex_Array_Object";
//++    elementOf ?StorageLanguage.
vertexArray ~= "file://../code/src/executables/Ex01_SimpleTriangle/main.cpp#lines=100-102".
    
/* Information about vertex count and memory layout. */
//++?vertexAttributeArray : Transient;
//++    = "glwiki::GLAPI/glEnableVertexAttribArray";
//++    = "glwiki::GLAPI/glVertexAttribPointer";
//++    partOf ?vertexArray.
vaaVertices ~= "file://../code/src/executables/Ex01_SimpleTriangle/main.cpp#lines=106-107".

/* Information about the number of vertex colors and their memory layout. */
//++?vertexAttributeArray : Transient;  
vaaColors ~= "file://../code/src/executables/Ex01_SimpleTriangle/main.cpp#lines=118-119".

//
// Shader
//

/* The shader code */
vertexShaderSource ~= "file://../code/src/shaders/Examples/ex01_simpleTriangle.vert".
fragmentShaderSource ~= "file://../code/src/shaders/Examples/ex01_simpleTriangle.frag".

/* A shader program object. This is linked to the pipeline and contains the executable shader code. */
shaderProgram 
    ~= "file://../code/src/executables/Ex01_SimpleTriangle/main.cpp#line=67";
    ~= "file://../code/src/libraries/Common/Shader.cpp#line=74".

/* The code to execute on the GPU */
//++?shaderProgram : Transient;
//++    = "glwiki::GLSL_Object#Program_objects";
//++    hasRole Shader.

vertexShader ~= "file://../code/src/libraries/Common/Shader.cpp#line=6".
fragmentShader ~= "file://../code/src/libraries/Common/Shader.cpp#line=7".