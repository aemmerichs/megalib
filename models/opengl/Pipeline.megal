module opengl.Pipeline

import opengl.Platform


/* 
@Description:
	The OpenGL pipeline processes primitives (namely points, lines and triangles defined by vertices - points in world space). As a result it rasterizes the primitives and returns shaded pixel values.

@Rationale:
	https://www.khronos.org/opengl/wiki/Rendering_Pipeline_Overview
*/
glPipeline : ?StorageLanguage -> ?TextureStorageLanguage.


/*
@Description:
	A pattern for fixed and optional processes that are executed in a specified order.
	
@Rationale:
	https://en.wikipedia.org/wiki/Instruction_pipelining
*/
Pipeline : AbstractProcess;
	= "wikipedia::Instruction_pipelining".



/* 
@Description:
	The Pipeline has multiple fixed function processes and programmable stages. The function of these processes and stages are specified later. Here we look at the general process.
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Rendering_Pipeline_Overview
*/
?OpenGLPipeline : Technology; //TODO Construct??
	= "glwiki::Rendering_Pipeline_Overview";
	= "glwiki::Vertex_Rendering#Direct_rendering";
	uses Pipeline;
	facilitates GraphicsPipeline;
	facilitates Rendering;
	//facilitates UnifiedShaderModel; // for modern GPUs
	implements glPipeline.
	

//
// Atifacts in the pipeline
//

/*
@Description:
	A storage object for data. It can be used for vertex positions or other data.
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Buffer_Object
*/
?buffer : Transient;
	= "glwiki::Buffer_Object";
	elementOf ?StorageLanguage.
	
	
/*
@Description:
	A storage object for color data with multiple color channels and mipmaps (smaller sized versions of the image). Uses special hardware cache mechanisms for faster read and write operations.
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Texture
*/
?texture : Transient;
	= "glwiki::Texture";
	elementOf ?TextureStorageLanguage.
	

/*
@Description:
	The framebuffer object is used for rendering and consists of multiple textures (e.g. color, depth). If no other framebuffer object is specified, the OpenGL pipeline will render into the default one. The default one is created at OpenGL context creation.
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Default_Framebuffer
	https://www.khronos.org/opengl/wiki/Framebuffer_Object
*/
?framebuffer : Transient;
	= "glwiki::Default_Framebuffer";
	= "glwiki::Framebuffer_Object";
	elementOf ?TextureStorageLanguage.
	

/*
@Description:
	The vertex array object stores information about the state as it has information about bound vertex buffers and their sizes.
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Vertex_Specification#Vertex_Array_Object
*/
?vertexArrayObject : Transient;
	= "glwiki::Vertex_Specification#Vertex_Array_Object";
	elementOf ?StorageLanguage.
	
	
/*
@Description:
	This array stores information about a specific vertex buffer object bound to the vertex array object.
	
@Rationale:
	https://www.khronos.org/opengl/wiki/glVertexAttribPointer
*/
?vertexAttributeArray : Transient;
	= "glwiki::GLAPI/glEnableVertexAttribArray";
	= "glwiki::GLAPI/glVertexAttribPointer";
	partOf ?vertexArrayObject;
	elementOf GLSL.
	

/*
@Description:
	Values that are passed through the pipeline from one to another shader stage. The user can specify operations to be executed for these values (e.g. interpolation).
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)#Shader_stage_inputs_and_outputs
*/
?passValue : Transient;
	= "glwiki::Type_Qualifier_(GLSL)#Shader_stage_inputs_and_outputs";
	partOf ?OpenGLPipeline;
	elementOf GLSL.
	

//
//	Functions
//

glPipeline(?vertexArrayObject) |-> ?framebuffer.

/* 
@Description:
	This function uses an index buffer and draws the corresponding triangles into the framebuffer. Every element in the index buffer links to a vertex in the vertex buffer, that is bound to the vertex array object. Vertices can be reused for multiple triangles.
	
@Rationale:
	https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glDrawElements.xhtml
	https://www.khronos.org/opengl/wiki/Vertex_Rendering
*/
glDrawElements : ?StorageLanguage # ?StorageLanguage -> ?TextureStorageLanguage.
glDrawElements(?vertexArrayObject, ?buffer) |-> ?framebuffer.
glDrawElements ^composedOf glPipeline.

?GraphicsDriver implements glDrawElements.


/* 
@Description:
	This function renders all vertices from the vertex buffer, bound to the vertex array object.
	
@Rationale:
	https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glDrawArrays.xhtml
*/
glDrawArrays : ?StorageLanguage -> ?TextureStorageLanguage.
glDrawArrays(?vertexArrayObject) |-> ?framebuffer.
glDrawArrays ^composedOf glPipeline.

?GraphicsDriver implements glDrawArrays.


//
// Pipeline processes
//
	
/* 
@Description:
	Generate a draw call and switch between different rendering modes (e.g. rendering or compute shading).
	If a Compute Shader is linked, it may be executed in this stage. If not, a drawcall is generated and executed.
	For more information see PipelineDrawDispatch.megal
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Vertex_Specification
	http://on-demand.gputechconf.com/siggraph/2015/presentation/SIG1512-Tristan-Lorach.pdf#page=6
*/
DrawProcessing : AbstractProcess;
	= "glwiki::Compute_Shader";
	^uses ?OpenGLPipeline;
	aspectOf GeneralPurposeProgramming.

/*
@Description:
	Start of rendering pipeline. Execute Vertex Shader to transform vertices.
	For more information see PipelineVertexProcessing.megal
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Vertex_Processing
*/
VertexProcessing : AbstractProcess;
	= "glwiki::Vertex_Processing";
	^uses ?OpenGLPipeline.

/*
@Description:
	Optional: Execute Tessellation Shader to generate new vertices inside a primitive and transform them.
	For more information see PipelineTessellation.megal
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Tessellation
*/
Tessellation : AbstractProcess;
	= "glwiki::Tessellation";
	^uses ?OpenGLPipeline.

/*
@Description:
	Optional: Execute Geometry Shader, to generate new Vertices (less than Tessellation).
	Primitives are clipped at the view frustum (visible area of the world) and vertices are divided by their homogeneous coordinate (perspective divide).

@Rationale:
	https://www.khronos.org/opengl/wiki/Geometry_Shader
	https://www.khronos.org/opengl/wiki/Vertex_Post-Processing
	https://www.khronos.org/opengl/wiki/Primitive_Assembly
*/
PrimitiveProcessing : AbstractProcess;
	= "glwiki::Geometry_Shader";
	= "glwiki::Vertex_Post-Processing";
	= "glwiki::Primitive_Assembly";
	^uses ?OpenGLPipeline.

/* 
@Description:
	Execute rasterization process. Primitives are rasterized to pixels.
	For more information see PipelineRasterization.megal
	
@Rationale:
	Information about the process: https://msdn.microsoft.com/en-us/library/windows/desktop/bb147314(v=vs.85).aspx
*/
Rasterization : AbstractProcess;
	= "glspec::glspec44.core.pdf#page=433";
	^uses ?OpenGLPipeline.

/*
@Description:
	Execute Fragment Shader. The shader is executed for each generated pixel and compute a color value for it.
	For more information see PipelineFragmentProcessing.megal

@Rationale:
	https://www.khronos.org/opengl/wiki/Fragment_Shader
*/
FragmentProcessing : AbstractProcess;
	= "glspec::glspec44.core.pdf#page=455";
	^uses ?OpenGLPipeline.

/*
@Description:
	Process pixels by executing blending processes and write the final value to the output framebuffer.
	For more information see PipelinePixelProcessing.megal
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Per-Sample_Processing
*/
PixelProcessing : AbstractProcess;
	= "glspec::glspec44.core.pdf#page=466";
	= "glwiki::Per-Sample_Processing";
	^uses ?OpenGLPipeline.
	
