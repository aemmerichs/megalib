module opengl.PipelineVertexProcessing

import opengl.PipelineDrawDispatch where {
	[ 
	  ?drawCallIn / ?drawCall
	]
}


/*
@Description:
	Start of the rendering pipeline. Execute Vertex Shader to transform vertices. This stage will always be executed and has a default if no vertex shader is bound. In the default case, vertices are passed by without any transformation.
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Vertex_Processing
*/
vertexProcessing : GlslArray -> ?StorageLanguage.

/* A point defined by its position and other attributes. */
GlVertex : Role;
	= "glwiki::Vertex_Specification".

/*
@Description:
	A list of vertices. Each vertex is defined by its unique ID and a 4 dimensional position. The fourth component must be set to 1. Four dimensions are necessary for matrix multiplication to transform the points.
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Vertex_Specification#Vertex_Stream
	//TODO information about transformation
*/
?vertices : Artifact;
	= "glwiki::Vertex_Specification#Vertex_Stream";
	elementOf ?StorageLanguage;
	manifestsAs Transient;
	hasRole GlVertex.
	
/*
@Description:
	This function processes incoming draw calls to prepare vertices for the vertex shader invocation. This includes loading buffer data, specified in the vertex shader.
	
@Rationale:
	TODO
*/
vertexProcessing(?drawCallIn) |-> ?vertices.
vertexProcessing ^composedOf glPipeline.
vertexProcessing concretizes VertexProcessing.
?OpenGLPipeline implements vertexProcessing.

	
///* Extract all vertex IDs from the draw call. */
//VertexInvocation : AbstractProcess;
//	^uses ?OpenGLPipeline.
//
//
///* Load vertex information from the bound buffers. */
//VertexAssembly : AbstractProcess;
//	^uses ?OpenGLPipeline.
	
	
/*
@Description:
	Execute the vertex shader and compute vertex information (e.g. transform the position). Additionally it can write to pass values for other shader stages.
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Vertex_Shader
*/
VertexShading : AbstractProcess;
	= "glwiki::Vertex_Shader"; //TODO more links?
	//refines SIMT; //TODO
	^uses ?OpenGLPipeline.
	
/*
@Description:
	The vertex shader function. It processes vertices to modify them, e.g. for view transformation.
	
@Rationale:
	https://www.khronos.org/opengl/wiki/Vertex_Shader
*/
vertexShader : ?StorageLanguage -> ?StorageLanguage.
?verticesVsIn : Artifact;
	elementOf ?StorageLanguage;
	manifestsAs Transient;
	hasRole GlVertex.
?verticesVsOut : Artifact;
	elementOf ?StorageLanguage;
	manifestsAs Transient;
	hasRole GlVertex.
vertexShader(?verticesVsIn) |-> ?verticesVsOut.
vertexShader concretizes VertexShading.
vertexShader ^composedOf vertexProcessing.

?OpenGLPipeline implements vertexShader.
	
	

//
//  Values used in vertex shading
//

// Inputs
/* A unique ID per vertex. */
?glVertexID : Artifact;
	= "glwiki::Vertex_Shader#Other_inputs";
	manifestsAs Transient;
	elementOf GlslInt.
/* In instaced rendering, meshes are rendered multiple times with different transformation matrices. This ID defines the instance, the vertex is processed in. */
?glIstanceID : Artifact; 
	= "glwiki::Vertex_Shader#Other_inputs";
	manifestsAs Transient;
	elementOf GlslInt.

// Outputs
/* The position of the vertex. (required output of the vertex shader) */
?glPosition : Artifact;
	= "glwiki::Vertex_Shader#Outputs";
	manifestsAs Transient;
	elementOf GlslVec4.
/* If rendering points instead of triangles, this value describes the diameter of the point in pixel for the rasterizer. */
?glPointSize : Artifact;
	= "glwiki::Vertex_Shader#Outputs";
	= "https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPointSize.xhtml";
	manifestsAs Transient;
	elementOf GlslFloat.
/* The clipping distance of this vertex, e.g. minimal distance to the camera to discard the rasterization. */
?glClipDistance : Artifact;
	= "glwiki::Vertex_Shader#Outputs";
	= "https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/gl_ClipDistance.xhtml";
	manifestsAs Transient;
	elementOf GlslFloatArray.
	