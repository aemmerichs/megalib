module owncloud.Owncloud

import nsis.NSIS

/* Owncloud enables the synchronization of files across multiple clients.
It further supports conflict detection, simple version control and IOScheduling to handle the 
synchronization. A policy states which files are supposed to synchronized. */
FileSynchronization : AbstractProcess;
    = "https://en.wikipedia.org/wiki/File_synchronization".
SynchronizedFile : Role;
    = "https://en.wikipedia.org/wiki/File_synchronization".
ConflictDetection : AbstractProcess;
    = "http://www.tgrmn.com/web/kb/item35.htm".
VersionControl : AbstractProcess;
    = "https://en.wikipedia.org/wiki/Version_control".
IOScheduling : AbstractProcess;
    = "https://en.wikipedia.org/wiki/I/O_scheduling".
OwnCloud : Application;
    = "https://en.wikipedia.org/wiki/OwnCloud";
    = "https://en.wikipedia.org/wiki/Comparison_of_file_synchronization_software";
    uses FileSynchronization;
    uses ConflictDetection;
    uses VersionControl;
    uses IOScheduling;
    implements URL.

/* OwnCloud uses various languages. The program is written mostly in C++, C, Objective-C, 
Perl and some bits of PHP. For the deployment process, NSIS and C-Make are used. */   
OwncloudPolicyLanguage : ConfigurationLanguage;
    = "https://github.com/owncloud/core/blob/5ce66c4d5f9a895bec41f56f7cc96661eec00ae6/config/config.sample.php";
    subsetOf PHP.
OwnCloud uses C++;
    uses C;
    uses ObjectiveC;
    uses Perl;
    uses NSIS;
    uses CMake;
    implements OwncloudPolicyLanguage.

/* The server communicates with the connected filesystems using the client software. In this
use case we have two clients and one server involved. */
OwnCloud uses Client-Server.
OwnCloudServer : Application;
    = "https://github.com/owncloud/core";
    partOf OwnCloud;
    uses C++;
    uses C;
    uses ObjectiveC;
    uses Perl;
    uses NSIS;
    uses CMake;
    implements OwncloudPolicyLanguage.
OwnCloudClient : Application;
    = "https://de.wikipedia.org/wiki/OwnCloud#Sync-Clients";
    uses C++;
    uses C;
    uses ObjectiveC;
    uses Perl;
    uses NSIS;
    uses CMake;
    partOf OwnCloud.
?webServer : Node. //TODO: Not precise enough, the node uses Windows where owncloud is plugged into the filesystem?
?serverAppFiles : Artifact;
    elementOf C++;
    manifestsAs File+;
    hasRole Executable;
    ^deployedAs OwnCloudServer;
    deployedAt ?webServer.
?userFiles1 : UserFiles.
?userFiles2 : UserFiles.

/* A file is uploaded in the first file system and then downloaded due to the synchronization
process by the second client. The sharing policy states that synchronization for this file
is enabled. */
?l : Language.
?file1 : Artifact;
    elementOf ?l;
    hasRole SynchronizedFile;
    manifestsAs File;
    partOf ?userFiles1.
?file2 : Artifact;
    elementOf ?l;
    hasRole SynchronizedFile;
    manifestsAs File;
    partOf ?userFiles2;
    correspondsTo ?file1.  // equality
?sharingAllowedPolicy : Artifact;
    elementOf OwncloudPolicyLanguage;
    hasRole Configuration;
    manifestsAs File;
    deployedAt ?webServer.
share : URL # OwncloudPolicyLanguage # ?l -> ?l.
OwnCloud implements share.
?serverurl1 : Artifact;
    elementOf URL;
    hasRole Reference;
    manifestsAs Fragment;
    partOf ?userFiles1. //don't know where
?serverurl2 : Artifact;
    elementOf URL;
    hasRole Reference;
    manifestsAs Fragment;
    partOf ?userFiles2;
    correspondsTo ?serverurl1.
share(?serverurl1,?sharingAllowedPolicy,?file1) |-> ?file2.