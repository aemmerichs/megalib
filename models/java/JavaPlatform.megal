module java.JavaPlatform

/* We cover the components top down. The largest independent technology would
be the JDK. It comes with several tools for programmers, such as the javac compiler.
It also contains the JRE, which then contains the JVM. The JRE might be deployed
independently. */
JDK : Framework;
    = "http://www.oracle.com/technetwork/java/javase/documentation/jdk8-doc-downloads-2133158.html";
    = "http://www.oracle.com/technetwork/java/javase/tech/index.html";
    uses Java;
    belongsTo JavaWare;
    supports GeneralPurposeProgramming.
JavaC : Program;
    = "https://en.wikipedia.org/wiki/Javac";
    = "https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-3.html";
    uses Java;
    uses Compilation;
    partOf JDK;
    supports MetaProgramming;
    implements Java;
    implements JavaByteCode.
JRE : Framework;
    = "http://www.oracle.com/technetwork/java/javase/tech/index.html";
    uses Java;
    partOf JDK; //optional part of is implied through Framework class
    implements Jar.    
JVM : Construct;
    = "https://docs.oracle.com/javase/specs/jvms/se8/html/".
JVMValue : ValueLanguage;
    = "https://docs.oracle.com/javase/specs/jvms/se8/html/".
JVMObject : ValueLanguage;
    = "https://docs.oracle.com/javase/tutorial/java/javaOO/objects.html";
    encodes Object;
    subsetOf JVMValue.
JVMDouble : ValueLanguage;
    = "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html";
    subsetOf JVMValue.
JVMString : ValueLanguage;
    = "https://docs.oracle.com/javase/6/docs/api/java/lang/String.html";
    subsetOf JVMObject. //string as a wrapper for a character array
JavaSEHotSpot : Application;
    = "http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136373.html";
    uses Java;
    uses JVM;
    uses Interpretation;
    implements JavaByteCode;
    implements JVMValue.
JavaClassLibrary : Library; //component and library
    = "https://en.wikipedia.org/wiki/Java_Class_Library";
    partOf JRE; //non-optional part
    uses Java.
    
/* The Java programming language,
which is compiled into Java byte code, which is then interpreted using
runtime data handled by the JVM. */
compileJava : Java -> JavaByteCode.
JavaC implements compileJava.
?javaFiles : Artifact;
    elementOf Java;
    hasRole SourceCode;
    manifestsAs File+.
?classFiles : Artifact;
    elementOf JavaByteCode;
    hasRole ByteCode;
    manifestsAs File+.
compileJava(?javaFiles) |-> ?classFiles.
//TODO: Cannot state eval, cannot express system state changes.