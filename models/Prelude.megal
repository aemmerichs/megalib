Language < Entity
ProgrammingLanguage < Language
DataRepresentationLanguage < Language // Any binding?
MarkupLanguage < Language
TransformationLanguage < Language
QueryLanguage < Language 
elementOf < Artifact # Language
subsetOf < Language # Language

String : DataRepresentationLanguage
String = "https://en.wikipedia.org/wiki/String_(computer_science)"
Number : DataRepresentationLanguage
Number = "https://en.wikipedia.org/wiki/Number"
Boolean : DataRepresentationLanguage
Boolean = "https://en.wikipedia.org/wiki/Boolean_data_type"

Artifact < Entity
// Purpose-based classification of artifacts
SyntaxDefinition < Artifact
Specification < Artifact
Value < Artifact
Configuration < Artifact

defines < Artifact # Entity // Too general?
conformsTo < Artifact # Artifact
correspondsTo < Artifact # Artifact

// Manifestations of artifacts
Manifestation < Entity
File : Manifestation
File = "https://en.wikipedia.org/wiki/Computer_file"
File+ : Manifestation
File+ = "https://en.wikipedia.org/wiki/Computer_file"
Folder : Manifestation
Folder = "https://en.wikipedia.org/wiki/Directory_(computing)"
WebResource : Manifestation
WebResource = "https://en.wikipedia.org/wiki/Web_resource"
Transient : Manifestation
Transient = "https://en.wikipedia.org/wiki/Transient_(computer_programming)"
Fragment : Manifestation
Fragment = "https://en.wikipedia.org/wiki/Snippet_(programming)"
manifestsAs < Artifact # Manifestation

// Roles of artifacts
Role < Entity
Grammar : Role
Grammar = "https://en.wikipedia.org/wiki/Context-free_grammar"
Database : Role
Database = "https://en.wikipedia.org/wiki/Database"
Schema : Role
Schema = "https://en.wikipedia.org/wiki/Database_schema"
Query : Role
Query = "https://en.wikipedia.org/wiki/Query_language"
MdeModel : Role // in the sense of MDE
MdeModel = "https://en.wikipedia.org/wiki/Model-driven_engineering"
MdeMetamodel : Role // in the sense of MDE
MdeMetamodel = "https://en.wikipedia.org/wiki/Metamodeling"
MvcModel : Role
MvcModel = "https://en.wikipedia.org/wiki/Model-view-controller"
MvcView : Role
MvcView = "https://en.wikipedia.org/wiki/Model-view-controller"
MvcController : Role
MvcController = "https://en.wikipedia.org/wiki/Model-view-controller"
hasRole < Artifact # Role
participantOf < Role # DesignPattern
participantOf < Role # ArchitecturalStyle
// aspectOf??? < Role # ProgrammingDomain . Better name needed

Function < Entity
Transformation < Function
implements < Artifact # Function

// Classification of technologies
Technology < Entity
API < Technology
Library < Technology
Framework < Technology
System < Entity
Application < System
WebApplication < System

// Part-of relationships
partOf < Artifact # Artifact
partOf < Artifact # System
partOf < Artifact # Technology
partOf < Technology # Technology
partOf < System # System

// Implementation relationships
implements < Artifact # Function
implements < Technology # Function
implements < Technology # Language
implements < System # Function

// We should eventually replace Concept by more specific categories.
Concept < Entity
Paradigm < Concept // Maybe we should derive from Entity directly
ProgrammingDomain < Concept
TechnologySpace < Concept
DesignPattern < Concept
ArchitecturalStyle < Concept
AbstractProcess < Concept // Name?
Serialization : AbstractProcess
Serialization = "https://en.wikipedia.org/wiki/Serialization"

belongsTo < Technology # ProgrammingDomain // should that be supports
realizes < Artifact # AbstractProcess
realizes < Technology # AbstractProcess

// Usage
uses < System # System
uses < System # Technology
uses < System # DesignPattern
uses < System # ArchitecturalStyle
uses < System # AbstractProcess
uses < System # Language
uses < Technology # Technology
uses < Technology # DesignPattern
uses < Technology # ArchitecturalStyle
uses < Technology # Language
uses < Artifact # DesignPattern
uses < Artifact # ArchitecturalStyle
uses < Artifact # System
uses < Artifact # Technology
uses < Artifact # Language

// Facilitation (deferred usage)
facilitates < Technology # DesignPattern
facilitates < Technology # ArchitecturalStyle
facilitates < Technology # ProgrammingDomain // Should we add this one?
facilitates < Technology # AbstractProcess
facilitates < Language # Paradigm
facilitates < Language # ProgrammingDomain