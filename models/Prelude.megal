Language < Entity
    = "https://en.wikipedia.org/wiki/Computer_language"
FileFormat < Language
    = "https://en.wikipedia.org/wiki/File_format"
ProgrammingLanguage < Language
    = "https://en.wikipedia.org/wiki/Programming_language"
ObjectGraph < Language
    = "https://en.wikipedia.org/wiki/Object_graph"
DataRepresentationLanguage < Language 
    = "https://de.wikipedia.org/wiki/Datenformat" //need better binding
MarkupLanguage < Language
    = "https://en.wikipedia.org/wiki/Markup_language"
TransformationLanguage < Language
    = "https://en.wikipedia.org/wiki/Transformation_language" // even though the text is misleading
QueryLanguage < Language 
    = "https://en.wikipedia.org/wiki/Query_language"
StylesheetLanguage < Language
    = "https://en.wikipedia.org/wiki/Style_sheet_language"
SchemaLanguage < Language
    = "https://en.wikipedia.org/wiki/Category:Data_modeling_languages"
CommandLineLanguage < Language
    = "https://en.wikipedia.org/wiki/Command-line_interface"
ModelingLanguage < Language
    = "https://en.wikipedia.org/wiki/Modeling_language"
InstructionSet < Language
    = "https://en.wikipedia.org/wiki/Instruction_set"
ConfigurationLanguage < Language
    = "https://en.wikipedia.org/wiki/Configuration_file"
ReferenceLanguage < Language
    = "https://en.wikipedia.org/wiki/Reference"
subsetOf < Language # Language
embeddedInto < Language # Language 

String : DataRepresentationLanguage
    = "https://en.wikipedia.org/wiki/String_(computer_science)"
Number : DataRepresentationLanguage
    = "https://en.wikipedia.org/wiki/Number"
Boolean : DataRepresentationLanguage
    = "https://en.wikipedia.org/wiki/Boolean_data_type"

//Classification by Language, Role and Manifestation
Artifact < Entity
    = "https://en.wikipedia.org/wiki/Artifact_(software_development)"
defines < Artifact # Language 
elementOf < Artifact # Language
conformsTo < Artifact # Artifact
correspondsTo < Artifact # Artifact

// Manifestations of artifacts
Manifestation < Entity
    = "https://en.oxforddictionaries.com/definition/manifestation"
File : Manifestation
    = "https://en.wikipedia.org/wiki/Computer_file"
File+ : Manifestation
    = "https://en.wikipedia.org/wiki/Computer_file" // a set of files
Folder : Manifestation
    = "https://en.wikipedia.org/wiki/Directory_(computing)"
WebResource : Manifestation
    = "https://en.wikipedia.org/wiki/Web_resource"
Transient : Manifestation
    = "https://en.wikipedia.org/wiki/Transient_(computer_programming)"
Fragment : Manifestation
    = "https://en.wikipedia.org/wiki/Snippet_(programming)"
manifestsAs < Artifact # Manifestation

// Roles of artifacts
Role < Entity
    = "https://en.wikipedia.org/wiki/Artifact_(software_development)"
Configuration : Role
    = "https://en.wikipedia.org/wiki/Configuration_file"
Grammar : Role
    = "https://en.wikipedia.org/wiki/Context-free_grammar"
Database : Role
    = "https://en.wikipedia.org/wiki/Database"
Schema : Role
    = "https://en.wikipedia.org/wiki/Database_schema"
Query : Role
    = "https://en.wikipedia.org/wiki/Query_language"
MdeModel : Role // in the sense of MDE
    = "https://en.wikipedia.org/wiki/Model-driven_engineering"
MdeMetamodel : Role // in the sense of MDE
    = "https://en.wikipedia.org/wiki/Metamodeling"
MvcModel : Role
    = "https://en.wikipedia.org/wiki/Model-view-controller"
MvcView : Role
    = "https://en.wikipedia.org/wiki/Model-view-controller"
MvcController : Role
    = "https://en.wikipedia.org/wiki/Model-view-controller"
Value : Role
    = "https://en.wikipedia.org/wiki/Value_(computer_science)"
Input : Role
    = "http://101companies.org/wiki/Input"
Output : Role
    = "http://101companies.org/wiki/Output"
Message : Role
    = "https://en.wikipedia.org/wiki/Message_passing"
Specification : Role
    = "https://en.wikipedia.org/wiki/Specification_(technical_standard)"
Log : Role
    = "https://en.wikipedia.org/wiki/Logfile"
DescriptiveModel : Role
    = "http://www.businessdictionary.com/definition/descriptive-model.html"
TransformationRule : Role
    = "http://101companies.org/wiki/Transformation"
Reference : Role
    = "https://en.wikipedia.org/wiki/Reference"
hasRole < Artifact # Role

Function < Entity
    = "https://en.wikipedia.org/wiki/Function_(mathematics)"
implements < Artifact # Function

// Classification of technologies
Technology < Entity
    = "http://www.journals.elsevier.com/information-and-software-technology/"
API < Technology
    = "https://en.wikipedia.org/wiki/Application_programming_interface"
Library < Technology
    = "https://en.wikipedia.org/wiki/Library_(computing)"
Framework < Technology
    = "https://en.wikipedia.org/wiki/Software_framework"
Plugin < Technology // as an extension to a software suite or IDE or plug & play architecture
    = "https://en.wikipedia.org/wiki/Plug-in_(computing)"
Component < Technology // as part of a framework or library
    = "https://en.wikipedia.org/wiki/Component-based_software_engineering#Software_component"
SoftwareSuite < Technology // ?
    = "https://en.wikipedia.org/wiki/Software_suite"
IDE < Technology // ?
    = "https://en.wikipedia.org/wiki/Integrated_development_environment"
Platform < Technology 
    = "https://en.wikipedia.org/wiki/Computing_platform"
System < Entity
    = "https://en.wikipedia.org/wiki/Software_system"
Application < System
    = "https://en.wikipedia.org/wiki/Application_software"
WebApplication < System
    = "https://en.wikipedia.org/wiki/Web_application"
FileSystem < System
    = "https://en.wikipedia.org/wiki/File_system"

// Implementation relationships
implements < Technology # Function
implements < Technology # Language

Paradigm < Entity 
    = "https://en.wikipedia.org/wiki/Programming_paradigm"
ConcurrentProgramming : Paradigm
    = "https://blog.golang.org/concurrency-is-not-parallelism"
ObjectOrientation : Paradigm
    = "https://en.wikipedia.org/wiki/Object-oriented_programming"
FunctionalProgramming : Paradigm
    = "https://en.wikipedia.org/wiki/Functional_programming"
RelationalModeling : Paradigm
    = "https://en.wikipedia.org/wiki/Relational_model"

ProgrammingDomain < Entity
    = "https://en.wikipedia.org/wiki/Domain_(software_engineering)"
GeneralPurposeProgramming : ProgrammingDomain
    = "https://en.wikipedia.org/wiki/General-purpose_programming_language"
MetaProgramming : ProgrammingDomain
    = "https://en.wikipedia.org/wiki/Metaprogramming"
DatabaseProgramming : ProgrammingDomain
    = "http://101companies.org/wiki/Database_programming"
// Database aspectOf DatabaseProgramming

TechnologySpace < Entity
    = "https://www.researchgate.net/publication/228580557_Technological_Spaces_An_Initial_Appraisal"

DesignPattern < Entity
    = "https://en.wikipedia.org/wiki/Software_design_pattern"

ArchitecturalPattern < Entity
    = "https://en.wikipedia.org/wiki/Architectural_pattern"

AbstractProcess < Entity 
    = "https://en.wikipedia.org/wiki/Abstract_process"
Serialization : AbstractProcess
    = "https://en.wikipedia.org/wiki/Serialization"
Compilation : AbstractProcess
    = "https://de.wikipedia.org/wiki/Compiler"
Transformation : AbstractProcess
    = "https://en.wikipedia.org/wiki/Data_transformation"

Construct < Entity 
    = "https://en.wikipedia.org/wiki/Construct_(philosophy)"
Semaphore : Construct
    = "https://en.wikipedia.org/wiki/Semaphore_(programming)"

participantOf < Role # DesignPattern
participantOf < Role # ArchitecturalPattern
belongsTo < Technology # TechnologySpace
belongsTo < Language # TechnologySpace
supports < Technology # ProgrammingDomain
supports < Language # ProgrammingDomain
realizes < Artifact # AbstractProcess
realizes < Technology # AbstractProcess
aspectOf < AbstractProcess # ProgrammingDomain
aspectOf < Role # ProgrammingDomain // Better name needed
aspectOf < Construct # Paradigm

// Part-of relationships
partOf < Artifact # Artifact
partOf < Artifact # System
partOf < Artifact # Technology
partOf < Technology # Technology
partOf < System # System

// Language usage
writtenIn < System # Language
writtenIn < Technology # Language

// Usage
uses < System # System
uses < System # Technology
uses < System # DesignPattern
uses < System # ArchitecturalPattern
uses < System # AbstractProcess
uses < System # Language  // Necessary?
uses < Technology # Technology
uses < Technology # DesignPattern
uses < Technology # ArchitecturalPattern
uses < Technology # Language  // Necessary?
uses < Artifact # DesignPattern
uses < Artifact # ArchitecturalPattern
uses < Artifact # System
uses < Artifact # Technology
uses < Artifact # Language

// Facilitation (deferred usage)
facilitates < Technology # DesignPattern
facilitates < Technology # ArchitecturalPattern
facilitates < Technology # AbstractProcess
facilitates < Language # Paradigm
facilitates < Language # ProgrammingDomain